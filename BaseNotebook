{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled0.ipynb",
      "provenance": [],
      "authorship_tag": "ABX9TyNd1c9bReYd/iXNbsGvSyzx",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/AdamHood/StockPredictionFun/blob/master/BaseNotebook\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "l4BWaCza6B7W",
        "colab_type": "text"
      },
      "source": [
        "Description: This program predicts the price of stocks using a Machine Learning algorithm created through pycaret"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "xxQqiL9o6XvG",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 51
        },
        "outputId": "e3310cc1-846b-4f83-b536-c02728ad6c77"
      },
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "plt.style.use('seaborn-darkgrid')\n",
        "from pandas_datareader import data\n",
        "import fix_yahoo_finance as yf\n",
        "yf.pdr_override() \n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/pandas_datareader/compat/__init__.py:7: FutureWarning: pandas.util.testing is deprecated. Use the functions in the public API at pandas.testing instead.\n",
            "  from pandas.util.testing import assert_frame_equal\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "abvGo-7O7Fmq",
        "colab_type": "text"
      },
      "source": [
        "Get the data from the Google Finance API"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "JdI4Cj3iAj3J",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 507
        },
        "outputId": "7d2b6271-d5fe-46a0-a897-27556b58fd3c"
      },
      "source": [
        "\n",
        "symbol = 'AMZN'\n",
        "data_source='google'\n",
        "start_date = '2010-01-01'\n",
        "end_date = '2016-01-01'\n",
        "df = data.get_data_yahoo(symbol, start_date, end_date)\n",
        "print(df)\n",
        "df.head()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[*********************100%***********************]  1 of 1 downloaded\n",
            "                  Open        High  ...   Adj Close    Volume\n",
            "Date                                ...                      \n",
            "2010-01-04  136.250000  136.610001  ...  133.899994   7599900\n",
            "2010-01-05  133.429993  135.479996  ...  134.690002   8851900\n",
            "2010-01-06  134.600006  134.729996  ...  132.250000   7178800\n",
            "2010-01-07  132.009995  132.320007  ...  130.000000  11030200\n",
            "2010-01-08  130.559998  133.679993  ...  133.520004   9830500\n",
            "...                ...         ...  ...         ...       ...\n",
            "2015-12-24  663.349976  664.679993  ...  662.789978   1091200\n",
            "2015-12-28  665.559998  675.500000  ...  675.200012   3783600\n",
            "2015-12-29  677.979980  696.440002  ...  693.969971   5735000\n",
            "2015-12-30  691.890015  695.489990  ...  689.070007   3519000\n",
            "2015-12-31  686.080017  687.750000  ...  675.890015   3749600\n",
            "\n",
            "[1510 rows x 6 columns]\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Open</th>\n",
              "      <th>High</th>\n",
              "      <th>Low</th>\n",
              "      <th>Close</th>\n",
              "      <th>Adj Close</th>\n",
              "      <th>Volume</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Date</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2010-01-04</th>\n",
              "      <td>136.250000</td>\n",
              "      <td>136.610001</td>\n",
              "      <td>133.139999</td>\n",
              "      <td>133.899994</td>\n",
              "      <td>133.899994</td>\n",
              "      <td>7599900</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2010-01-05</th>\n",
              "      <td>133.429993</td>\n",
              "      <td>135.479996</td>\n",
              "      <td>131.809998</td>\n",
              "      <td>134.690002</td>\n",
              "      <td>134.690002</td>\n",
              "      <td>8851900</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2010-01-06</th>\n",
              "      <td>134.600006</td>\n",
              "      <td>134.729996</td>\n",
              "      <td>131.649994</td>\n",
              "      <td>132.250000</td>\n",
              "      <td>132.250000</td>\n",
              "      <td>7178800</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2010-01-07</th>\n",
              "      <td>132.009995</td>\n",
              "      <td>132.320007</td>\n",
              "      <td>128.800003</td>\n",
              "      <td>130.000000</td>\n",
              "      <td>130.000000</td>\n",
              "      <td>11030200</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2010-01-08</th>\n",
              "      <td>130.559998</td>\n",
              "      <td>133.679993</td>\n",
              "      <td>129.029999</td>\n",
              "      <td>133.520004</td>\n",
              "      <td>133.520004</td>\n",
              "      <td>9830500</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                  Open        High  ...   Adj Close    Volume\n",
              "Date                                ...                      \n",
              "2010-01-04  136.250000  136.610001  ...  133.899994   7599900\n",
              "2010-01-05  133.429993  135.479996  ...  134.690002   8851900\n",
              "2010-01-06  134.600006  134.729996  ...  132.250000   7178800\n",
              "2010-01-07  132.009995  132.320007  ...  130.000000  11030200\n",
              "2010-01-08  130.559998  133.679993  ...  133.520004   9830500\n",
              "\n",
              "[5 rows x 6 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 2
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "dlHV5yeJUQ6n",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 297
        },
        "outputId": "07cdab4f-c301-459d-b0a2-abb2ec4c2acf"
      },
      "source": [
        "df.describe()\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Open</th>\n",
              "      <th>High</th>\n",
              "      <th>Low</th>\n",
              "      <th>Close</th>\n",
              "      <th>Adj Close</th>\n",
              "      <th>Volume</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>1510.000000</td>\n",
              "      <td>1510.000000</td>\n",
              "      <td>1510.000000</td>\n",
              "      <td>1510.000000</td>\n",
              "      <td>1510.000000</td>\n",
              "      <td>1.510000e+03</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>277.482291</td>\n",
              "      <td>280.660589</td>\n",
              "      <td>274.111086</td>\n",
              "      <td>277.548550</td>\n",
              "      <td>277.548550</td>\n",
              "      <td>4.689367e+06</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>121.927712</td>\n",
              "      <td>122.922124</td>\n",
              "      <td>120.651436</td>\n",
              "      <td>121.788146</td>\n",
              "      <td>121.788146</td>\n",
              "      <td>3.222191e+06</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>105.930000</td>\n",
              "      <td>111.290001</td>\n",
              "      <td>105.800003</td>\n",
              "      <td>108.610001</td>\n",
              "      <td>108.610001</td>\n",
              "      <td>9.844000e+05</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>185.747505</td>\n",
              "      <td>188.420002</td>\n",
              "      <td>183.585003</td>\n",
              "      <td>185.867501</td>\n",
              "      <td>185.867501</td>\n",
              "      <td>2.756100e+06</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>257.589996</td>\n",
              "      <td>259.779999</td>\n",
              "      <td>254.904999</td>\n",
              "      <td>257.820007</td>\n",
              "      <td>257.820007</td>\n",
              "      <td>3.942550e+06</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>334.584992</td>\n",
              "      <td>336.715004</td>\n",
              "      <td>328.910003</td>\n",
              "      <td>332.895005</td>\n",
              "      <td>332.895005</td>\n",
              "      <td>5.468450e+06</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>691.890015</td>\n",
              "      <td>696.440002</td>\n",
              "      <td>686.380005</td>\n",
              "      <td>693.969971</td>\n",
              "      <td>693.969971</td>\n",
              "      <td>4.242110e+07</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "              Open         High  ...    Adj Close        Volume\n",
              "count  1510.000000  1510.000000  ...  1510.000000  1.510000e+03\n",
              "mean    277.482291   280.660589  ...   277.548550  4.689367e+06\n",
              "std     121.927712   122.922124  ...   121.788146  3.222191e+06\n",
              "min     105.930000   111.290001  ...   108.610001  9.844000e+05\n",
              "25%     185.747505   188.420002  ...   185.867501  2.756100e+06\n",
              "50%     257.589996   259.779999  ...   257.820007  3.942550e+06\n",
              "75%     334.584992   336.715004  ...   332.895005  5.468450e+06\n",
              "max     691.890015   696.440002  ...   693.969971  4.242110e+07\n",
              "\n",
              "[8 rows x 6 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ABMdXrNNn4k_",
        "colab_type": "text"
      },
      "source": [
        "Create function to build LAG feature"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "sOGt_qzcU0SA",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "def buildLaggedFeatures(s,lag=2,dropna=True):\n",
        "\n",
        "# Builds a new DataFrame to facilitate regressing over all possible lagged features\n",
        "\n",
        "  if type(s) is pd.DataFrame:\n",
        "      new_dict={}\n",
        "      for col_name in s:\n",
        "          new_dict[col_name]=s[col_name]\n",
        "          # create lagged Series\n",
        "          for l in range(1,lag+1):\n",
        "              new_dict['%s_lag%d' %(col_name,l)]=s[col_name].shift(l)\n",
        "      res=pd.DataFrame(new_dict,index=s.index)\n",
        "\n",
        "  elif type(s) is pd.Series:\n",
        "      the_range=range(lag+1)\n",
        "      res=pd.concat([s.shift(i) for i in the_range],axis=1)\n",
        "      res.columns=['lag_%d' %i for i in the_range]\n",
        "  else:\n",
        "      print('Only works for DataFrame or Series')\n",
        "      return None\n",
        "  if dropna:\n",
        "      return res.dropna()\n",
        "  else:\n",
        "      return res "
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "CFJ2QN3AoB8h",
        "colab_type": "text"
      },
      "source": [
        "Reverse the dataset sort order to perform proper lag calculation"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "erfGPUx0e5hl",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 272
        },
        "outputId": "223e2f44-12f0-4876-aba2-0f32616d5726"
      },
      "source": [
        "#df_r=df.sort_index(ascending=False)\n",
        "df_r=df.sort_values(by=['Date'], ascending=False)\n",
        "print(df_r)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "                  Open        High  ...   Adj Close    Volume\n",
            "Date                                ...                      \n",
            "2015-12-31  686.080017  687.750000  ...  675.890015   3749600\n",
            "2015-12-30  691.890015  695.489990  ...  689.070007   3519000\n",
            "2015-12-29  677.979980  696.440002  ...  693.969971   5735000\n",
            "2015-12-28  665.559998  675.500000  ...  675.200012   3783600\n",
            "2015-12-24  663.349976  664.679993  ...  662.789978   1091200\n",
            "...                ...         ...  ...         ...       ...\n",
            "2010-01-08  130.559998  133.679993  ...  133.520004   9830500\n",
            "2010-01-07  132.009995  132.320007  ...  130.000000  11030200\n",
            "2010-01-06  134.600006  134.729996  ...  132.250000   7178800\n",
            "2010-01-05  133.429993  135.479996  ...  134.690002   8851900\n",
            "2010-01-04  136.250000  136.610001  ...  133.899994   7599900\n",
            "\n",
            "[1510 rows x 6 columns]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3bhb3SJ5oeAs",
        "colab_type": "text"
      },
      "source": [
        "Execute LAG calculation and list columns"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "U0Iq4SdLVVxp",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 476
        },
        "outputId": "efe7e68b-fa44-47c9-c880-9c7311d390bb"
      },
      "source": [
        "df_lag=buildLaggedFeatures(df_r,lag=1,dropna=False)\n",
        "print(df_lag)\n",
        "for col in df_lag.columns: \n",
        "    print(col)\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "                  Open   Open_lag1  ...    Volume  Volume_lag1\n",
            "Date                                ...                       \n",
            "2015-12-31  686.080017         NaN  ...   3749600          NaN\n",
            "2015-12-30  691.890015  686.080017  ...   3519000    3749600.0\n",
            "2015-12-29  677.979980  691.890015  ...   5735000    3519000.0\n",
            "2015-12-28  665.559998  677.979980  ...   3783600    5735000.0\n",
            "2015-12-24  663.349976  665.559998  ...   1091200    3783600.0\n",
            "...                ...         ...  ...       ...          ...\n",
            "2010-01-08  130.559998  132.619995  ...   9830500    8779400.0\n",
            "2010-01-07  132.009995  130.559998  ...  11030200    9830500.0\n",
            "2010-01-06  134.600006  132.009995  ...   7178800   11030200.0\n",
            "2010-01-05  133.429993  134.600006  ...   8851900    7178800.0\n",
            "2010-01-04  136.250000  133.429993  ...   7599900    8851900.0\n",
            "\n",
            "[1510 rows x 12 columns]\n",
            "Open\n",
            "Open_lag1\n",
            "High\n",
            "High_lag1\n",
            "Low\n",
            "Low_lag1\n",
            "Close\n",
            "Close_lag1\n",
            "Adj Close\n",
            "Adj Close_lag1\n",
            "Volume\n",
            "Volume_lag1\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "JefShqpRorX6",
        "colab_type": "text"
      },
      "source": [
        "Remove extra LAG variables created"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "lSssLyG5xNVj",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 136
        },
        "outputId": "1dc33976-ee78-4d01-9433-bb52feadf99b"
      },
      "source": [
        "df_lag_cleaned=df_lag.drop(columns=['High_lag1', 'High_lag1', 'Low_lag1', 'Open_lag1', 'Adj Close_lag1', 'Volume_lag1'])\n",
        "for col in df_lag_cleaned.columns: \n",
        "    print(col)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Open\n",
            "High\n",
            "Low\n",
            "Close\n",
            "Close_lag1\n",
            "Adj Close\n",
            "Volume\n"
          ],
          "name": "stdout"
        }
      ]
    }
  ]
}